// Copyright (C) 2022 Nikunj Gupta
//
// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
//  Software Foundation, version 3.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// You should have received a copy of the GNU General Public License along
// with this program. If not, see <https://www.gnu.org/licenses/>.

// Library generating .ci file. Includes all modules implemented in
// charm++

module libcharmtyles
{
    include "charmtyles/util/AST.hpp";

    readonly CProxy_charmtyles_base ct_proxy;
    readonly CProxy_set_future sf_proxy;

    chare set_future
    {
        entry set_future();

        entry [reductiontarget] void mark_complete();
        entry void put_future(ck::future<bool>);
    }

    array[1D] charmtyles_base
    {
        entry charmtyles_base(int, CProxy_set_future);   // Number of Partitions

        entry void main_kernel() {
            for (; SDAG_INDEX > -1;) {
                // Actual computation kernel
                when compute[SDAG_INDEX](int sdag_index,
                    std::vector<std::vector<ct::frontend::ASTNode>> instr_list) {
                serial "compute"
                {
                    // print_instructions(instr_list);

                    update_partitions(instr_list);

                    CkCallback cb(CkReductionTarget(set_future, mark_complete), set_future_proxy);
                    contribute(cb);
                }
                }
            }
        }

        entry void compute(int, std::vector<std::vector<ct::frontend::ASTNode>>);
    }
}
